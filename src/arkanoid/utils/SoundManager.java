package arkanoid.utils;

import javafx.scene.media.AudioClip;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

public class SoundManager {
    private static final Map<String, AudioClip> cache = new HashMap<>();
    private static AudioClip backgroundMusic;
    private static String currentBackgroundTrack = null;

    // MAP √ÇM L∆Ø·ª¢NG CHO T·ª™NG FILE
    private static final Map<String, Double> volumeMap = new HashMap<>();
    static {
        // √Çm thanh hi·ªáu ·ª©ng
        volumeMap.put("paddle.wav", 0.5);      // Ch·∫°m paddle - nh·ªè
        volumeMap.put("gach.wav", 0.5);        // Ch·∫°m g·∫°ch - nh·ªè
        volumeMap.put("gachvo.wav", 0.6);      // Ph√° g·∫°ch - v·ª´a
        volumeMap.put("powerup.wav", 0.7);     // Power-up - v·ª´a to
        volumeMap.put("game_over.wav", 0.8);   // Game over - to
        volumeMap.put("matmang.wav", 0.7);     // M·∫•t m·∫°ng - to
        volumeMap.put("Qua_man.wav", 0.8);     // Qua level - to
        volumeMap.put("steak.wav", 1.5);       // Streak/Excellent - to
    }

    private static AudioClip loadSound(String fileName) {
        try {
            URL url = SoundManager.class.getResource("/arkanoid/assets/sounds/" + fileName);
            if (url == null) {
                System.err.println("Kh√¥ng t√¨m th·∫•y √¢m thanh: " + fileName);
                return null;
            }
            return new AudioClip(url.toString());
        } catch (Exception e) {
            System.err.println("L·ªói khi t·∫£i √¢m thanh " + fileName + ": " + e.getMessage());
            return null;
        }
    }

    private static AudioClip getSound(String fileName) {
        return cache.computeIfAbsent(fileName, SoundManager::loadSound);
    }

    /** Ph√°t √¢m thanh hi·ªáu ·ª©ng (ng·∫Øn) - S·ª¨ D·ª§NG √ÇM L∆Ø·ª¢NG T·ª™ MAP */
    public static void play(String fileName) {
        AudioClip clip = getSound(fileName);
        if (clip != null) {
            // L·∫§Y √ÇM L∆Ø·ª¢NG T·ª™ MAP, N·∫æU KH√îNG C√ì TH√å D√ôNG M·∫∂C ƒê·ªäNH 0.6
            double volume = volumeMap.getOrDefault(fileName, 0.6);
            clip.setVolume(volume);
            clip.play();
        }
    }

    /** OVERLOAD: Ph√°t √¢m thanh v·ªõi √¢m l∆∞·ª£ng t√πy ch·ªçn */
    public static void play(String fileName, double volume) {
        AudioClip clip = getSound(fileName);
        if (clip != null) {
            clip.setVolume(Math.max(0.0, Math.min(1.0, volume))); // Gi·ªõi h·∫°n 0-1
            clip.play();
        }
    }

    /** Ph√°t nh·∫°c n·ªÅn loop v√¥ h·∫°n - CH·ªà ph√°t n·∫øu ch∆∞a ph√°t ho·∫∑c kh√°c b√†i */
    public static void playBackground(String fileName, double volume) {
        // N·∫øu ƒëang ph√°t c√πng b√†i nh·∫°c th√¨ KH√îNG l√†m g√¨
        if (fileName.equals(currentBackgroundTrack) &&
                backgroundMusic != null &&
                backgroundMusic.isPlaying()) {
            System.out.println("üéµ Background music already playing: " + fileName);
            return;
        }

        // N·∫øu kh√°c b√†i th√¨ d·ª´ng b√†i c≈© v√† ph√°t b√†i m·ªõi
        stopBackground();

        try {
            URL url = SoundManager.class.getResource("/arkanoid/assets/sounds/" + fileName);
            if (url != null) {
                backgroundMusic = new AudioClip(url.toString());
                backgroundMusic.setCycleCount(AudioClip.INDEFINITE);

                // GI·ªöI H·∫†N √ÇM L∆Ø·ª¢NG NH·∫†C N·ªÄN (0-0.4 ƒë·ªÉ kh√¥ng qu√° to)
                double limitedVolume = Math.max(0.0, Math.min(0.4, volume));
                backgroundMusic.setVolume(limitedVolume);
                backgroundMusic.play();
                currentBackgroundTrack = fileName;
                System.out.println("üéµ Started playing background: " + fileName + " (volume: " + limitedVolume + ")");
            }
        } catch (Exception e) {
            System.err.println("Kh√¥ng th·ªÉ ph√°t nh·∫°c n·ªÅn: " + e.getMessage());
        }
    }

    /** D·ª´ng nh·∫°c n·ªÅn ƒëang ph√°t */
    public static void stopBackground() {
        if (backgroundMusic != null) {
            backgroundMusic.stop();
            currentBackgroundTrack = null;
            System.out.println("Background music stopped");
        }
    }

    /** T·∫°m d·ª´ng nh·∫°c n·ªÅn */
    public static void pauseBackground() {
        if (backgroundMusic != null && backgroundMusic.isPlaying()) {
            backgroundMusic.stop();
            System.out.println("Background music paused");
        }
    }

    /** Ti·∫øp t·ª•c ph√°t nh·∫°c n·ªÅn */
    public static void resumeBackground() {
        if (backgroundMusic != null) {
            backgroundMusic.play();
            System.out.println("Background music resumed");
        }
    }

    /** Ki·ªÉm tra xem c√≥ nh·∫°c n·ªÅn ƒëang ph√°t kh√¥ng */
    public static boolean isBackgroundPlaying() {
        return backgroundMusic != null && backgroundMusic.isPlaying();
    }

    /** CH·ªàNH √ÇM L∆Ø·ª¢NG C·ª¶A NH·∫†C N·ªÄN */
    public static void setBackgroundVolume(double volume) {
        if (backgroundMusic != null) {
            double limitedVolume = Math.max(0.0, Math.min(0.3, volume)); // Max 40%
            backgroundMusic.setVolume(limitedVolume);
            System.out.println(" Background volume set to: " + limitedVolume);
        }
    }

}